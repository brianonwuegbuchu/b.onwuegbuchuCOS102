{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## What is NumPy?\n",
                "\n",
                "- NumPy is a Python library used for working with arrays.\n",
                "- It offers routines for linear algebra, Fourier transforms, and matrices.\n",
                "- Created in 2005 by Travis Oliphant, it is open source and freely available."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Why Use NumPy?\n",
                "\n",
                "- Python lists are flexible but slow for numerical work.\n",
                "- NumPy's `ndarray` is optimized in C, delivering up to 50Ã— speedups.\n",
                "- `ndarray` comes with many built-in functions for efficient array operations."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Importing NumPy\n",
                "```python\n",
                "import numpy\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## NumPy as `np`\n",
                "```python\n",
                "import numpy as np\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Checking the Version\n",
                "```python\n",
                "import numpy as np\n",
                "print(np.__version__)\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Creating an `ndarray`\n",
                "```python\n",
                "arr = np.array([101, 201, 301, 401, 501])\n",
                "print(arr)\n",
                "print(type(arr))  # <class 'numpy.ndarray'>\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Converting Iterables to Arrays\n",
                "```python\n",
                "name_list = ['Angel', 'Shemi', 'Marvel', 'Linda']\n",
                "age_tuple = (41, 32, 21, 19)\n",
                "grade_dict = {'CSC102': 89, 'MTH102': 77, 'CHM102': 69, 'GST102': 99}\n",
                "arr_names = np.array(name_list)\n",
                "arr_ages = np.array(age_tuple)\n",
                "arr_grades = np.array(list(grade_dict.values()))\n",
                "print(arr_names)  # ['Angel' 'Shemi' 'Marvel' 'Linda']\n",
                "print(arr_ages)  # [41 32 21 19]\n",
                "print(arr_grades)  # [89 77 69 99]\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Array Dimensions and `ndim`\n",
                "```python\n",
                "a = np.array(42)            # scalar, 0-D\n",
                "b = np.array([             # 3-D array\n",
                "    [[1,2,3],[4,5,6]],\n",
                "    [[7,8,9],[10,11,12]]\n",
                "])\n",
                "c = np.array([[1,2,3],[4,5,6]])  # 2-D\n",
                "d = np.array([1,2,3,4,5])       # 1-D\n",
                "print(a.ndim, b.ndim, c.ndim, d.ndim)  # 0,3,2,1\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Minimum Dimensions with `ndmin`\n",
                "```python\n",
                "arr_hd = np.array([1,2,3,4], ndmin=5)\n",
                "print(arr_hd)\n",
                "print(arr_hd.ndim)  # 5\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Accessing Elements\n",
                "```python\n",
                "arr = np.array([1,2,3,4])\n",
                "print(arr[1])  # 2\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 2-D Indexing\n",
                "```python\n",
                "arr2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n",
                "print(arr2d[1,4])  # 10\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 3-D Indexing\n",
                "```python\n",
                "arr3d = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n",
                "print(arr3d[0,1,2])  # 6\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Negative Indexing & Slicing\n",
                "```python\n",
                "arr_neg = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n",
                "print(arr_neg[1,-1])  # last of 2nd row = 10\n",
                "arr_slice = np.array([1,2,3,4,5,6,7])\n",
                "print(arr_slice[1:5])  # [2 3 4 5]\n",
                "print(arr_slice[4:])   # [5 6 7]\n",
                "print(arr_slice[:4])   # [1 2 3 4]\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Data Types (`dtype`)\n",
                "```python\n",
                "int_arr = np.array([1,2,3,4])\n",
                "str_arr = np.array(['apple','banana','cherry'])\n",
                "print(int_arr.dtype)    # e.g. int64\n",
                "print(str_arr.dtype)    # <U6\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Iterating Arrays\n",
                "```python\n",
                "for x in np.array([[1,2,3],[4,5,6]]):\n",
                "    for y in x:\n",
                "        print(y, x)\n",
                "```"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Joining & Splitting Arrays\n",
                "```python\n",
                "a = np.array([1,2,3])\n",
                "b = np.array([4,5,6])\n",
                "print(np.concatenate((a,b)))  # [1 2 3 4 5 6]\n",
                "arr = np.array([1,2,3,4,5,6])\n",
                "parts = np.array_split(arr, 3)\n",
                "print(parts)  # [array([1,2]), array([3,4]), array([5,6])]\n",
                "```"
            ]
        }
    ],
    "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}},
    "nbformat": 4,
    "nbformat_minor": 4
}
